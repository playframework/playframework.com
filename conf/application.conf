# This is the main configuration file for the application.
# ~~~~~

play {
  modules {
    enabled += services.github.GitHubModule
    enabled += services.releases.ReleasesModule
    enabled += models.ExamplesModule
    enabled += actors.ActorsModule
  }

  http {
    requestHandler = play.api.http.DefaultHttpRequestHandler
  }

  crypto.secret = changeme
  i18n.langs = [en, ja, tr, fr, bg]

  server.netty.option.child.SO_KEEPALIVE = true
}

github.committerTeams = ["Owners", "Integrators"]
github.organisation = "playframework"
github.apiUrl = "https://api.github.com"

# Example projects
examples.apiUrl = "https://example.lightbend.com/v1/api/templates"
examples.playVersions = [ "2.6.x", "2.5.x" ]
examples.cache.ttl = 1 hour

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/test"
db.default.username="root"
db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
play.modules.evolutions.db.default.autoApply = true

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

documentation.home=testdocs

# The loader dispatcher is used by the actor that loads files out of git.  All blocking git IO is done on these
# threads.
loader-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-max = 4
  }
}

# The polling dispatcher is responsible for two things, one is polling GitHub for documentation changes, the other
polling-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 1
    core-pool-size-max = 1
  }
}

sitemapgenerator-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 1
    core-pool-size-max = 1
  }
}

documentation {
  path = "."
  main {
    lang = "en"
    repo = "generated"
    versionFile = ".version"
    versionPattern = "(.+)"
    gitHubSource = "https://github.com/playframework/playframework/edit/%s/documentation/%s"
  }
  translations = [
    {
      lang = "ja"
      repo = "ja"
      gitHubSource = "https://github.com/playframework-ja/translation-project/blob/%s/%s"
    },
    {
      lang = "tr"
      repo = "tr"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/PlayFrameworkTR/translation-project/blob/%s/%s"
    },
    {
      lang = "fr"
      repo = "fr"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/cheleb/playframework-fr/blob/%s/%s"
    },
    {
      lang = "bg"
      repo = "bg"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/antonsarov/translation-project/blob/%s/%s"
    }
  ]
  redirects = [
    {
      from = "AkkaCore"
      to = "ThreadPools"
    },
    {
      from = "Installing"
      to = "Requirements"
    },
    {
      from = "AssetsGoogleClosureCompiler"
      to = "RequireJS-support"
    },
    {
      from = "CertificateRevocation"
      to = "https://lightbend.github.io/ssl-config/CertificateRevocation.html"
    },
    {
      from = "CipherSuites"
      to = "https://lightbend.github.io/ssl-config/CipherSuites.html"
    },
    {
      from = "HostnameVerification"
      to = "https://lightbend.github.io/ssl-config/HostnameVerification.html"
    },
    {
      from = "Protocols"
      to = "https://lightbend.github.io/ssl-config/Protocols.html"
    },
    {
      from = "PullRequests"
      to = "https://www.playframework.com/contributing"
    },
    {
      from = "WSQuickStart"
      to = "https://lightbend.github.io/ssl-config/WSQuickStart.html"
    },
    {
      from = "ExampleSSLConfig"
      to = "https://lightbend.github.io/ssl-config/ExampleSSLConfig.html"
    },
    {
      from = "JavaJson"
      to = "JavaJsonActions"
    },
    {
      from = "HttpApi"
      to = "ScalaActions"
    },
    {
      from = "ScalaEmbeddingPlay"
      to = "ScalaEmbeddingPlayAkkaHttp"
    },
    {
      from = "ScalaJsonGenerics"
      to = "ScalaJson"
    },
    {
      from = "ScalaJsonInception"
      to = "ScalaJsonAutomated"
    },
    {
      from = "JavaInterceptors"
      to = "JavaActionCreator"
    },
    {
      from = "JavaJsonRequests"
      to = "JavaJsonActions"
    },
    {
      from = "KeyStores"
      to = "https://lightbend.github.io/ssl-config/KeyStores.html"
    },
    {
      from = "ScalaFunctionalTest"
      to = "ScalaFunctionalTestingWithScalaTest"
    },
    {
      from = "CertificateGeneration"
      to = "https://lightbend.github.io/ssl-config/CertificateGeneration.html"
    },
    {
      from = "LooseSSL"
      to = "https://lightbend.github.io/ssl-config/LooseSSL.html"
    },
    {
      from = "ScalaGlobal"
      to = "GlobalSettings"
    },
    {
      from = "ScalaInterceptors"
      to = "ScalaHttpFilters"
    },
    {
      from = "JavaGlobal"
      to = "GlobalSettings"
    },
    {
      from = "JavaTodoList"
      to = "HelloWorldTutorial"
    },
    {
      from = "ScalaFormHelpers"
      to = "ScalaForms"
    },
    {
      from = "ScalaTodoList"
      to = "HelloWorldTutorial"
    },
    {
      from = "JavaJson"
      to = "JavaJsonActions"
    },
    {
      from = "ProductionDist"
      to = "Production"
    },
    {
      from = "ScalaJsonRequests"
      to = "ScalaJson"
    },
    {
      from = "ScalaTest"
      to = "ScalaTestingYourApplication"
    },
    {
      from = "Samples"
      to = "https://developer.lightbend.com/start/?group=play"
    }
  ]
}

# Better to have a dead JVM that we can run diagnostics on than no JVM at all
akka.jvm-exit-on-fatal-error = false
play.akka.jvm-exit-on-fatal-error = false
